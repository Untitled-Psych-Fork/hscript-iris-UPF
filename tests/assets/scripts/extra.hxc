import samples.enums.EnumSample;

typedef Point = {
	var x:Float;
	var y:Float;
}

var sb:Point = {
	x: 0,
	y: 0
};

sb.x = sb.y = 10;
trace(cast sb);
trace(cast(sb));
trace(cast(sb, Point));

var f = function(title:String, content:String, cond:Bool, result:Int, sb:Float) {
	trace("function bind:", title, content, "add:", result + sb, cond);
};

(f.bind("title", _, true, _, 12.5))("ahhhhh", 13);

var testArray = ["apple", "banana", "orange",];
var fruitPriceMap = [
	10 => "apple",
	12 => "banana",
	115 => "orange",
];
trace("Loop testArray");
for(value in testArray) {
	trace("Value: " + value);
}
Sys.println("");
trace("Loop fruitPriceMap");
for(key=>value in fruitPriceMap) {
	trace(value + "'s price is " + key + "$");
}

var checkEnum = EnumSample.LetterD(EnumSample.LetterB(EnumSample.LetterB(1)), EnumSample.LetterC("sb", "ahhh"), EnumSample.LetterA);
trace(checkEnum.match(EnumSample.LetterD(EnumSample.LetterB(EnumSample.LetterB(_)), EnumSample.LetterC(_, _), _)));